(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[594],{6941:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hands-on-workshop/handout/visual-tests",function(){return r(7440)}])},7440:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return i}});var s=r(5893),t=r(1151);function o(e){let n={a:"a",code:"code",em:"em",h2:"h2",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["You can optionally run visual regression tests for your components and storybook pages. We suggest to use either ",(0,s.jsx)(n.a,{href:"https://github.com/wKich/creevey",children:"Creevey"})," or ",(0,s.jsx)(n.a,{href:"https://loki.js.org/",children:"Loki"})," for this purpose.  Both already installed in ",(0,s.jsx)(n.em,{children:"design-system"})," workspace."]}),"\n",(0,s.jsx)(n.h2,{children:"Creevey"}),"\n",(0,s.jsx)(n.p,{children:"Running creevey requires Docker to be installed. Creevey provides a UI for previewing and managing component tests."}),"\n",(0,s.jsx)(n.p,{children:"First make sure the storybook already running, or if not, run it:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"yarn design-system\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then run in ",(0,s.jsx)(n.strong,{children:"separate"})," terminal window:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"yarn test:ui\n"})}),"\n",(0,s.jsx)(n.p,{children:"A UI will open. Follow the interface to run the tests."}),"\n",(0,s.jsxs)(n.p,{children:["Creevey is also configured to run as a workflow of Github actions. It will be triggered every time you push changes in ",(0,s.jsx)(n.code,{children:"design-system/src"})," folder. You can view test results in Actions tab of yuor repo"]}),"\n",(0,s.jsxs)(n.h4,{children:["Credits to ",(0,s.jsx)(n.a,{href:"https://www.linkedin.com/in/dmitriy-lazarev-5b2150a3/",children:"Dmitriy Lazarev"})," for the Creevey setup and support."]}),"\n",(0,s.jsx)(n.h2,{children:"Loki"}),"\n",(0,s.jsxs)(n.p,{children:["If you prefer more simple setup, you can use Loki. Loki prints test results to the console and stores refrence file in .loki folder at ",(0,s.jsx)(n.em,{children:"design-system"})," workspace."]}),"\n",(0,s.jsx)(n.p,{children:"Make sure the storybook already running:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"yarn design-system\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then run in ",(0,s.jsx)(n.strong,{children:"separate"})," terminal window:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"yarn test:loki\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["By default the tests are configured for chrome desktop and mobile only. ",(0,s.jsx)(n.a,{href:"https://loki.js.org/configuration.html",children:"Refer to documentation"})," if you want to extend your configuration."]})}),"\n",(0,s.jsxs)(n.p,{children:["You'll see the status of your tests in the console. If the test fail, you can check diff images in ",(0,s.jsx)(n.code,{children:"design-system/loki/diff"}),". You can update reference images by name (see tips in the console), or all together with"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"yarn test:loki:approve\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you want to update all tests at once, you can run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"yarn test:loki:update\n"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}},function(e){e.O(0,[888,774,179],function(){return e(e.s=6941)}),_N_E=e.O()}]);